{"version":3,"sources":["components/Icons.tsx","helpers/GetIcon.tsx","components/Input.tsx","components/Header.tsx","components/ExpenseSummary.tsx","components/Button.tsx","components/ExpenseForm.tsx","components/ExpenseList.tsx","components/IncomeForm.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["RemoveIcon","props","width","height","viewBox","fill","stroke","strokeWidth","strokeLinecap","strokeLinejoin","className","cssClass","d","MoneyIcon","LabelIcon","CloseIcon","ErrorIcon","GetIcon","icon","Input","id","label","toLowerCase","htmlFor","type","value","onChange","e","target","Header","role","aria-label","ExpenseSummary","sumUpExpenses","expenses","reduce","x","y","map","expense","cost","percentageSpent","income","parseInt","calcPrecentageSpent","setIncomeForm","accountBalance","isNaN","calcAccountBalance","style","Button","color","getButtonStyle","onClick","isTextVisible","text","ExpenseForm","onSubmit","expenseForm","title","preventDefault","undefined","error","newTitle","toString","newCost","ExpenseList","expenseListItems","key","length","IncomeForm","newIncome","reducer","state","action","payload","isExpenseFormVisible","addExpenseForm","updatedExpenseList","filter","initState","React","createContext","Boolean","window","location","hostname","match","ReactDOM","render","useReducer","dispatch","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.60b14c73.chunk.js","sourcesContent":["import React from 'react';\n\ntype Props = {\n  cssClass?: string;\n};\n\nexport const RemoveIcon = (props: Props) => {\n  return (\n    <svg\n      width={16}\n      height={16}\n      viewBox=\"0 0 24 24\"\n      fill=\"none\"\n      stroke=\"currentColor\"\n      strokeWidth={2}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      className={props.cssClass}\n    >\n      <path d=\"M21 4H8l-7 8 7 8h13a2 2 0 002-2V6a2 2 0 00-2-2zM18 9l-6 6M12 9l6 6\" />\n    </svg>\n  );\n};\n\nexport const MoneyIcon = (props: Props) => {\n  return (\n    <svg\n      width={16}\n      height={16}\n      viewBox=\"0 0 24 24\"\n      fill=\"none\"\n      stroke=\"currentColor\"\n      strokeWidth={2}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      className={props.cssClass}\n    >\n      <path d=\"M12 1v22M17 5H9.5a3.5 3.5 0 000 7h5a3.5 3.5 0 010 7H6\" />\n    </svg>\n  );\n};\n\nexport const LabelIcon = (props: Props) => {\n  return (\n    <svg\n      width={16}\n      height={16}\n      viewBox=\"0 0 24 24\"\n      fill=\"none\"\n      stroke=\"currentColor\"\n      strokeWidth={2}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      className={props.cssClass}\n    >\n      <path d=\"M20.59 13.41l-7.17 7.17a2 2 0 01-2.83 0L2 12V2h10l8.59 8.59a2 2 0 010 2.82zM7 7h.01\" />\n    </svg>\n  );\n};\n\nexport const CloseIcon = (props: Props) => {\n  return (\n    <svg\n      width={16}\n      height={16}\n      viewBox=\"0 0 24 24\"\n      fill=\"none\"\n      stroke=\"currentColor\"\n      strokeWidth={2}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      className={props.cssClass}\n    >\n      <path d=\"M18 6L6 18M6 6l12 12\" />\n    </svg>\n  );\n};\n\nexport const ErrorIcon = (props: Props) => {\n  return (\n    <svg\n      width={16}\n      height={16}\n      viewBox=\"0 0 24 24\"\n      fill=\"none\"\n      stroke=\"currentColor\"\n      strokeWidth={2}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      className={props.cssClass}\n    >\n      <path d=\"M7.86 2h8.28L22 7.86v8.28L16.14 22H7.86L2 16.14V7.86L7.86 2zM12 8v4M12 16h.01\" />\n    </svg>\n  );\n};\n","import React from 'react';\n\nimport {\n  LabelIcon,\n  MoneyIcon,\n  RemoveIcon,\n  CloseIcon,\n  ErrorIcon,\n} from '../components/Icons';\n\nexport const GetIcon = (icon?: string, cssClass?: string) => {\n  switch (icon) {\n    case 'label':\n      return <LabelIcon cssClass={cssClass} />;\n    case 'money':\n      return <MoneyIcon cssClass={cssClass} />;\n    case 'remove':\n      return <RemoveIcon cssClass={cssClass} />;\n    case 'close':\n      return <CloseIcon cssClass={cssClass} />;\n    case 'error':\n      return <ErrorIcon cssClass={cssClass} />;\n\n    default:\n      return null;\n  }\n};\n","import React from 'react';\nimport { GetIcon } from '../helpers/GetIcon';\n\ntype Props = {\n  label: string;\n  type: string;\n  value: string;\n  icon?: string;\n  onChange: (value: string) => void;\n};\n\nexport const Input = (props: Props) => {\n  const id = `${props.label.toLowerCase()}-input`;\n\n  return (\n    <div className=\"mb-4\">\n      <label\n        htmlFor={id}\n        className=\"block font-sans mb-2 font-overpass uppercase tracking-wide\"\n      >\n        {props.label}\n      </label>\n      <div className=\"relative\">\n        <input\n          id={id}\n          type={props.type}\n          className={`font-roboto border border-gray-800 p-2 w-full rounded-sm  ${\n            props.icon ? 'pl-8' : 'pl-2'\n          }`}\n          value={props.value}\n          onChange={e => {\n            props.onChange(e.target.value);\n          }}\n        />\n        <div className=\"absolute top-0 bottom-0\">\n          <div className=\"flex items-center h-full ml-2\">\n            {GetIcon(props.icon)}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\n\nexport const Header = () => {\n  return (\n    <header className=\"mb-2 px-3 py-4 border-gray-200 border-b  flex \">\n      <h1 className=\"font-overpass\">Budget Planner</h1>\n      <span role=\"img\" className=\"ml-3\" aria-label=\"money flying away\">\n        💸\n      </span>\n    </header>\n  );\n};\n","import React from 'react';\nimport { Expense, SetIncomeForm } from '../State';\nimport { GetIcon } from '../helpers/GetIcon';\n\ntype Props = {\n  expenses: Array<Expense>;\n  setIncomeForm: SetIncomeForm;\n};\n\nexport const ExpenseSummary = (props: Props) => {\n  const sumUpExpenses = (expenses: Array<number>) => {\n    return expenses.reduce((x, y) => x + y, 0);\n  };\n\n  const calcAccountBalance = (income: string = '0') => {\n    if (!isNaN(parseInt(income))) {\n      return parseInt(income) - sumUpExpenses(expenses);\n    }\n    return 'unable to calculate';\n  };\n\n  const calcPrecentageSpent = (expenses: number, income: string = '0') => {\n    return (expenses / parseInt(income)) * 100;\n  };\n\n  const expenses = props.expenses.map(expense => +expense.cost);\n  const percentageSpent = calcPrecentageSpent(\n    sumUpExpenses(expenses),\n    props.setIncomeForm.income\n  );\n  const accountBalance = calcAccountBalance(props.setIncomeForm.income);\n\n  return (\n    <div className=\"mt-2 font-overpass\">\n      <div className=\"shadow w-full bg-grey-light rounded\">\n        <div\n          className={`${\n            percentageSpent > 100\n              ? 'bg-red-500'\n              : percentageSpent < 100\n              ? 'bg-peach-500'\n              : 'bg-gray-400'\n          } text-xs leading-none py-2 text-center max-w-full`}\n          style={{\n            width: percentageSpent + '%',\n          }}\n        >\n          <p className=\"mx-2\">{sumUpExpenses(expenses)}</p>\n        </div>\n      </div>\n\n      <p className=\"flex justify-end items-center mt-4 text-sm\">\n        Remaining:\n        <span\n          className={`${\n            accountBalance < 0 ? 'text-red-700' : ''\n          } px-2 flex items-center`}\n        >\n          <span>{accountBalance}</span>\n          <span>{accountBalance < 0 && GetIcon('error', 'ml-2')}</span>\n        </span>\n      </p>\n    </div>\n  );\n};\n","import React from 'react';\nimport { GetIcon } from '../helpers/GetIcon';\n\ntype Props = {\n  text: string;\n  isTextVisible: boolean;\n  color: string;\n  style: 'solid' | 'outline' | 'none';\n  onClick?: () => void;\n  icon?: string;\n};\n\nexport const Button = (props: Props) => {\n  const getButtonStyle = (color: string, style: string) => {\n    switch (style) {\n      case 'solid':\n        return `bg-${color}-800 hover:bg-${color}-900 text-white rounded-sm w-full mr-2 p-2`;\n      case 'outline':\n        return 'border-blue-800 border-2 text-blue-800 w-full mr-2 p-2';\n      default:\n        return 'p-4';\n    }\n  };\n\n  return (\n    <button\n      className={getButtonStyle(props.color, props.style)}\n      onClick={props.onClick}\n    >\n      <span\n        className={\n          props.isTextVisible\n            ? 'font-overpass uppercase tracking-wide'\n            : 'sr-only'\n        }\n      >\n        {props.text}\n      </span>\n      {GetIcon(props.icon)}\n    </button>\n  );\n};\n","import React from 'react';\nimport { AddExpenseForm, Expense } from '../State';\nimport { Button } from './Button';\nimport { Input } from './Input';\n\ntype Props = {\n  expenseForm: AddExpenseForm;\n  onSubmit: (a: Expense) => void;\n  onChange: (a: AddExpenseForm) => void;\n  onClick: () => void;\n};\n\nexport const ExpenseForm = (props: Props) => {\n  return (\n    <div className=\"flex flex-col p-4 absolute bottom-0 z-50 w-full bg-gray-200\">\n      <form\n        onSubmit={e => {\n          const { cost, title } = props.expenseForm;\n\n          e.preventDefault();\n\n          if (\n            cost !== undefined &&\n            title !== undefined &&\n            !isNaN(parseInt(cost))\n          ) {\n            props.onSubmit({\n              cost: parseInt(cost),\n              title: title,\n            });\n          } else {\n            props.onChange({\n              ...props.expenseForm,\n              error:\n                'Make sure that the expense you want to add both have a title and a cost, which has to be a number',\n            });\n          }\n        }}\n      >\n        <p className=\"flex text-xs text-red-500 mb-4\">\n          {props.expenseForm.error}\n        </p>\n\n        <div className=\"flex justify-between flex-col\">\n          <Input\n            type=\"text\"\n            label=\"Title\"\n            value={props.expenseForm.title || ''}\n            icon=\"label\"\n            onChange={newTitle =>\n              props.onChange({ ...props.expenseForm, title: newTitle })\n            }\n          />\n          <Input\n            type=\"text\"\n            label=\"Cost\"\n            icon=\"money\"\n            value={props.expenseForm.cost?.toString() || ''}\n            onChange={newCost =>\n              props.onChange({ ...props.expenseForm, cost: newCost })\n            }\n          />\n          <div className=\"flex mt-4\">\n            <Button\n              text=\"add\"\n              isTextVisible={true}\n              color=\"blue\"\n              style=\"solid\"\n            />\n            <Button\n              text=\"Cancel\"\n              isTextVisible={true}\n              onClick={props.onClick}\n              color=\"blue\"\n              style=\"outline\"\n            />\n          </div>\n        </div>\n      </form>\n    </div>\n  );\n};\n","import React from 'react';\nimport { Expense } from '../State';\nimport { Button } from '../components/Button';\n\ntype Props = {\n  expenses: Array<Expense>;\n  onClick: (expense: string) => void;\n};\n\nexport const ExpenseList = (props: Props) => {\n  const expenseListItems = props.expenses.map(expense => {\n    return (\n      <li\n        className=\"flex justify-between items-center my-2 bg-gray-200 rounded font-roboto pl-4\"\n        key={expense.title}\n      >\n        <p className=\"mr-1\">{expense.title}</p>\n        <p>{expense.cost}</p>\n        <div className=\"max-w-sm\">\n          <Button\n            text=\"Remove Expense\"\n            isTextVisible={false}\n            icon=\"remove\"\n            onClick={() => props.onClick(expense.title)}\n            color=\"none\"\n            style=\"none\"\n          />\n        </div>\n      </li>\n    );\n  });\n\n  return (\n    <div className=\"mt-8\">\n      <h2 className=\"font-overpass uppercase text-sm\">Expenses</h2>\n      {expenseListItems.length > 0 ? (\n        <ul className=\"mt-3 mb-8\">{expenseListItems}</ul>\n      ) : (\n        <p className=\"font-roboto mt-2 mb-5\">Add an expense to get started</p>\n      )}\n    </div>\n  );\n};\n","import React from 'react';\nimport { SetIncomeForm } from '../State';\nimport { Input } from './Input';\n\ntype Props = {\n  setIncomeForm: SetIncomeForm;\n  onChange: (a: SetIncomeForm) => void;\n};\n\nexport const IncomeForm = (props: Props) => {\n  return (\n    <>\n      <Input\n        label=\"income\"\n        type=\"string\"\n        icon=\"money\"\n        value={props.setIncomeForm.income?.toString() || ''}\n        onChange={newIncome => {\n          props.onChange({\n            ...props.setIncomeForm,\n            income: newIncome,\n            error: isNaN(parseInt(newIncome))\n              ? 'Income should be a number'\n              : undefined,\n          });\n        }}\n      />\n      <p className=\"text-xs text-red-500 mb-2\">{props.setIncomeForm.error}</p>\n    </>\n  );\n};\n","import React, { useReducer } from 'react';\nimport { Action, State } from './State';\nimport {\n  ExpenseForm,\n  ExpenseSummary,\n  Header,\n  ExpenseList,\n  IncomeForm,\n  Button,\n} from './components';\n\nconst reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case 'addExpense':\n      return {\n        ...state,\n        expenses: [...state.expenses, action.payload],\n        isExpenseFormVisible: false,\n        addExpenseForm: {},\n      };\n    case 'updateExpenseForm':\n      return {\n        ...state,\n        addExpenseForm: action.payload,\n      };\n    case 'setIncome':\n      const newIncome = parseInt(action.payload.income || '');\n\n      return {\n        ...state,\n        income: action.payload.error ? state.income : newIncome,\n        setIncomeForm: action.payload,\n      };\n    case 'removeExpense':\n      const updatedExpenseList = state.expenses.filter(\n        expense => expense.title !== action.payload\n      );\n\n      return {\n        ...state,\n        expenses: updatedExpenseList,\n      };\n    case 'ToggleExpenseFormVisibility':\n      return {\n        ...state,\n        isExpenseFormVisible: action.payload,\n        addExpenseForm: {},\n      };\n  }\n};\n\nconst initState: State = {\n  expenses: [],\n  isExpenseFormVisible: false,\n  income: undefined,\n  addExpenseForm: {},\n  setIncomeForm: {},\n};\n\nexport const AppContext = React.createContext([\n  initState,\n  (() => {}) as React.Dispatch<Action>,\n] as [State, React.Dispatch<Action>]);\n\nexport const App = () => {\n  const [state, dispatch] = useReducer(reducer, initState);\n\n  return (\n    <main className=\"h-screen relative flex justify-between flex-col max-w-md m-auto bg-white shadow\">\n      <div>\n        <Header />\n        <div className=\"p-4\">\n          <IncomeForm\n            setIncomeForm={state.setIncomeForm}\n            onChange={income => {\n              dispatch({ type: 'setIncome', payload: income });\n            }}\n          />\n          <ExpenseList\n            expenses={state.expenses}\n            onClick={expense => {\n              dispatch({ type: 'removeExpense', payload: expense });\n            }}\n          />\n          <ExpenseSummary\n            expenses={state.expenses}\n            setIncomeForm={state.setIncomeForm}\n          />\n        </div>\n      </div>\n\n      <div>\n        <div className=\"m-4\">\n          <Button\n            text=\"Add expense\"\n            isTextVisible={true}\n            color=\"blue\"\n            style=\"solid\"\n            onClick={() => {\n              dispatch({\n                type: 'ToggleExpenseFormVisibility',\n                payload: !state.isExpenseFormVisible,\n              });\n            }}\n          />\n        </div>\n\n        {state.isExpenseFormVisible && (\n          <ExpenseForm\n            onSubmit={expense =>\n              dispatch({ type: 'addExpense', payload: expense })\n            }\n            expenseForm={state.addExpenseForm}\n            onChange={expense => {\n              dispatch({ type: 'updateExpenseForm', payload: expense });\n            }}\n            onClick={() => {\n              dispatch({\n                type: 'ToggleExpenseFormVisibility',\n                payload: !state.isExpenseFormVisible,\n              });\n            }}\n          />\n        )}\n      </div>\n    </main>\n  );\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/tailwind.css';\nimport { App } from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
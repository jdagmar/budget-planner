{"version":3,"sources":["components/Icons.tsx","helpers/GetIcon.tsx","components/Input.tsx","components/Header.tsx","components/ExpenseSummary.tsx","components/Button.tsx","components/ExpenseForm.tsx","components/ExpenseList.tsx","components/IncomeForm.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["RemoveIcon","props","width","height","viewBox","fill","stroke","strokeWidth","strokeLinecap","strokeLinejoin","className","cssClass","d","MoneyIcon","LabelIcon","CloseIcon","GetIcon","icon","Input","id","label","toLowerCase","htmlFor","type","value","onChange","e","target","Header","role","ExpenseSummary","expenses","map","expense","cost","sumUpExpenses","reduce","x","y","income","parseInt","calcAccountBalance","setIncomeForm","Button","cssClasses","color","classes","onClick","text","ExpenseForm","onSubmit","expenseForm","title","preventDefault","undefined","isNaN","error","newTitle","toString","newCost","ExpenseList","expenseListItems","key","length","IncomeForm","newIncome","reducer","state","action","payload","isExpenseFormVisible","addExpenseForm","updatedExpenseList","filter","initState","React","createContext","Boolean","window","location","hostname","match","ReactDOM","render","useReducer","dispatch","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.0a5172cc.chunk.js","sourcesContent":["import React from 'react';\n\ntype Props = {\n  cssClass?: string;\n};\n\nexport const AddIcon = (props: Props) => {\n  return (\n    <svg\n      width={16}\n      height={16}\n      viewBox=\"0 0 24 24\"\n      fill=\"none\"\n      stroke=\"currentColor\"\n      strokeWidth={2}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      className={props.cssClass}\n    >\n      <path d=\"M12 5v14M5 12h14\" />\n    </svg>\n  );\n};\n\nexport const RemoveIcon = (props: Props) => {\n  return (\n    <svg\n      width={16}\n      height={16}\n      viewBox=\"0 0 24 24\"\n      fill=\"none\"\n      stroke=\"currentColor\"\n      strokeWidth={2}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      className={props.cssClass}\n    >\n      <path d=\"M21 4H8l-7 8 7 8h13a2 2 0 002-2V6a2 2 0 00-2-2zM18 9l-6 6M12 9l6 6\" />\n    </svg>\n  );\n};\n\nexport const MoneyIcon = (props: Props) => {\n  return (\n    <svg\n      width={16}\n      height={16}\n      viewBox=\"0 0 24 24\"\n      fill=\"none\"\n      stroke=\"currentColor\"\n      strokeWidth={2}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      className={props.cssClass}\n    >\n      <path d=\"M12 1v22M17 5H9.5a3.5 3.5 0 000 7h5a3.5 3.5 0 010 7H6\" />\n    </svg>\n  );\n};\n\nexport const LabelIcon = (props: Props) => {\n  return (\n    <svg\n      width={16}\n      height={16}\n      viewBox=\"0 0 24 24\"\n      fill=\"none\"\n      stroke=\"currentColor\"\n      strokeWidth={2}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      className={props.cssClass}\n    >\n      <path d=\"M20.59 13.41l-7.17 7.17a2 2 0 01-2.83 0L2 12V2h10l8.59 8.59a2 2 0 010 2.82zM7 7h.01\" />\n    </svg>\n  );\n};\n\nexport const CloseIcon = (props: Props) => {\n  return (\n    <svg\n      width={16}\n      height={16}\n      viewBox=\"0 0 24 24\"\n      fill=\"none\"\n      stroke=\"currentColor\"\n      strokeWidth={2}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      className={props.cssClass}\n    >\n      <path d=\"M18 6L6 18M6 6l12 12\" />\n    </svg>\n  );\n};\n","import React from 'react';\n\nimport {\n  LabelIcon,\n  MoneyIcon,\n  RemoveIcon,\n  CloseIcon,\n} from '../components/Icons';\n\nexport const GetIcon = (icon?: string, cssClass?: string) => {\n  switch (icon) {\n    case 'label':\n      return <LabelIcon cssClass={cssClass} />;\n    case 'money':\n      return <MoneyIcon cssClass={cssClass} />;\n    case 'remove':\n      return <RemoveIcon cssClass={cssClass} />;\n    case 'close':\n      return <CloseIcon cssClass={cssClass} />;\n    default:\n      return null;\n  }\n};\n","import React from 'react';\nimport { GetIcon } from '../helpers/GetIcon';\n\ntype Props = {\n  label: string;\n  placeholder?: string;\n  type: string;\n  value: string;\n  onChange: (value: string) => void;\n  icon?: string;\n};\n\nexport const Input = (props: Props) => {\n  const id = `${props.label.toLowerCase()}-input`;\n  return (\n    <div className=\"mb-4\">\n      <label\n        htmlFor={id}\n        className=\"block font-sans mb-2 text-sm font-overpass uppercase tracking-wide\"\n      >\n        {props.label}\n      </label>\n      <div className=\"relative\">\n        <input\n          id={id}\n          type={props.type}\n          className={`font-roboto border border-gray-800 p-2 w-full rounded-sm text-sm ${\n            props.icon ? 'pl-8' : 'pl-2'\n          }`}\n          value={props.value}\n          onChange={e => {\n            props.onChange(e.target.value);\n          }}\n        />\n        <div className=\"absolute top-0 bottom-0\">\n          <div className=\"flex items-center h-full ml-2\">\n            {GetIcon(props.icon)}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\n\nexport const Header = () => {\n  return (\n    <header className=\"mb-2 px-3 py-4 bg-peach text-center flex justify-center\">\n      <h1 className=\"font-overpass\">Budget Planner</h1>\n      <span role=\"img\" className=\"ml-3\">\n        💸\n      </span>\n    </header>\n  );\n};\n","import React from 'react';\nimport { Expense, SetIncomeForm } from '../State';\n\ntype Props = {\n  expenses: Array<Expense>;\n  setIncomeForm: SetIncomeForm;\n};\n\nexport const ExpenseSummary = (props: Props) => {\n  const expenses = props.expenses.map(expense => +expense.cost);\n\n  const sumUpExpenses = (expenses: Array<number>) => {\n    return expenses.reduce((x, y) => x + y, 0);\n  };\n\n  const calcAccountBalance = (income: string = '0') => {\n    return parseInt(income) - sumUpExpenses(expenses);\n  };\n\n  return (\n    <div className=\"mt-2 font-roboto\">\n      <p>Sum of expenses: {sumUpExpenses(expenses)} SEK</p>\n      <p>Balance: {calcAccountBalance(props.setIncomeForm.income)} SEK </p>\n    </div>\n  );\n};\n","import React from 'react';\nimport { GetIcon } from '../helpers/GetIcon';\n\ntype Props = {\n  text: string;\n  icon?: string;\n  classes?: string;\n  color?: string;\n  onClick?: () => void;\n};\n\nexport const Button = (props: Props) => {\n  const cssClasses = `flex p-2 bg-${props.color} rounded-sm font-overpass items-center ${props.classes}`;\n  return (\n    <button className={cssClasses} onClick={props.onClick}>\n      <span>{props.text}</span>\n      {GetIcon(props.icon)}\n    </button>\n  );\n};\n","import React from 'react';\nimport { Button } from './Button';\nimport { Input } from './Input';\nimport { AddExpenseForm, Expense } from '../State';\n\ntype Props = {\n  expenseForm: AddExpenseForm;\n  onSubmit: (a: Expense) => void;\n  onChange: (a: AddExpenseForm) => void;\n  onClick: () => void;\n};\n\nexport const ExpenseForm = (props: Props) => {\n  return (\n    <div className=\"p-4 absolute bottom-0 z-50 w-full bg-gray-200\">\n      <Button\n        text=\"\"\n        icon=\"close\"\n        classes=\"absolute right-0 pr-4\"\n        onClick={props.onClick}\n      />\n\n      <form\n        className=\"mt-4\"\n        onSubmit={e => {\n          const { cost, title } = props.expenseForm;\n\n          e.preventDefault();\n\n          if (\n            cost !== undefined &&\n            title !== undefined &&\n            !isNaN(parseInt(cost))\n          ) {\n            props.onSubmit({\n              cost: parseInt(cost),\n              title: title,\n            });\n          } else {\n            props.onChange({ ...props.expenseForm, error: 'not valid' });\n          }\n        }}\n      >\n        <div className=\"flex justify-between flex-col\">\n          <Input\n            type=\"text\"\n            label=\"Title\"\n            value={props.expenseForm.title || ''}\n            icon=\"label\"\n            onChange={newTitle =>\n              props.onChange({ ...props.expenseForm, title: newTitle })\n            }\n          />\n          <Input\n            type=\"text\"\n            label=\"Cost\"\n            icon=\"money\"\n            value={props.expenseForm.cost?.toString() || ''}\n            onChange={newCost =>\n              props.onChange({ ...props.expenseForm, cost: newCost })\n            }\n          />\n          <Button text=\"add\" color=\"swampGreen\" classes=\"w-full mt-2\" />\n        </div>\n        <p className=\"text-xs text-red-500 mb-2\">{props.expenseForm.error}</p>\n      </form>\n    </div>\n  );\n};\n","import React from 'react';\nimport { Expense } from '../State';\nimport { GetIcon } from '../helpers/GetIcon';\n\ntype Props = {\n  expenses: Array<Expense>;\n  onClick: (expense: string) => void;\n};\n\nexport const ExpenseList = (props: Props) => {\n  const expenseListItems = props.expenses.map(expense => {\n    return (\n      <li\n        className=\"flex justify-between my-2 bg-gray-200 p-2 rounded font-roboto\"\n        key={expense.title}\n      >\n        <p className=\"mr-1\">{expense.title}</p>\n        <p>{expense.cost} kr</p>\n        <button onClick={() => props.onClick(expense.title)}>\n          {GetIcon('remove')}\n          <span className=\"sr-only\">Remove expense</span>\n        </button>\n      </li>\n    );\n  });\n\n  return (\n    <div className=\"mt-8\">\n      <h2 className=\"font-overpass uppercase text-sm\">Expenses</h2>\n      {expenseListItems.length > 0 ? (\n        <ul className=\"mt-3 mb-8\">{expenseListItems}</ul>\n      ) : (\n        <p>Add an expense to get started</p>\n      )}\n    </div>\n  );\n};\n","import React from 'react';\nimport { Input } from './Input';\nimport { SetIncomeForm } from '../State';\n\ntype Props = {\n  setIncomeForm: SetIncomeForm;\n  onChange: (a: SetIncomeForm) => void;\n};\n\nexport const IncomeForm = (props: Props) => {\n  return (\n    <>\n      <Input\n        label=\"income\"\n        type=\"string\"\n        icon=\"money\"\n        value={props.setIncomeForm.income?.toString() || ''}\n        onChange={newIncome => {\n          props.onChange({\n            ...props.setIncomeForm,\n            income: newIncome,\n            error: isNaN(parseInt(newIncome)) ? 'not valid' : undefined,\n          });\n        }}\n      />\n      <p className=\"text-xs text-red-500 mb-2\">{props.setIncomeForm.error}</p>\n    </>\n  );\n};\n","import React, { useReducer } from 'react';\nimport {\n  ExpenseForm,\n  ExpenseSummary,\n  Header,\n  ExpenseList,\n  IncomeForm,\n  Button,\n} from './components';\nimport { Action, State } from './State';\n\nconst reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case 'addExpense':\n      return {\n        ...state,\n        expenses: [...state.expenses, action.payload],\n        isExpenseFormVisible: false,\n        addExpenseForm: {},\n      };\n    case 'updateExpenseForm':\n      return {\n        ...state,\n        addExpenseForm: action.payload,\n      };\n    case 'setIncome':\n      const newIncome = parseInt(action.payload.income || '');\n\n      return {\n        ...state,\n        income: action.payload.error ? state.income : newIncome,\n        setIncomeForm: action.payload,\n      };\n    case 'removeExpense':\n      const updatedExpenseList = state.expenses.filter(\n        expense => expense.title !== action.payload\n      );\n\n      return {\n        ...state,\n        expenses: updatedExpenseList,\n      };\n    case 'ToggleExpenseFormVisibility':\n      return {\n        ...state,\n        isExpenseFormVisible: action.payload,\n      };\n  }\n};\n\nconst initState: State = {\n  expenses: [\n    { title: 'Kittens', cost: 500 },\n    { title: 'Cat food', cost: 200 },\n  ],\n  isExpenseFormVisible: false,\n  income: undefined,\n  addExpenseForm: {},\n  setIncomeForm: {},\n};\n\nexport const AppContext = React.createContext([\n  initState,\n  (() => {}) as React.Dispatch<Action>,\n] as [State, React.Dispatch<Action>]);\n\nexport const App = () => {\n  const [state, dispatch] = useReducer(reducer, initState);\n\n  return (\n    <main className=\"h-screen relative flex justify-between flex-col max-w-md m-auto bg-white shadow\">\n      <div>\n        <Header />\n        <div className=\"p-4\">\n          <IncomeForm\n            setIncomeForm={state.setIncomeForm}\n            onChange={income => {\n              dispatch({ type: 'setIncome', payload: income });\n            }}\n          />\n          <ExpenseList\n            expenses={state.expenses}\n            onClick={expense => {\n              dispatch({ type: 'removeExpense', payload: expense });\n            }}\n          />\n          <ExpenseSummary\n            expenses={state.expenses}\n            setIncomeForm={state.setIncomeForm}\n          />\n        </div>\n      </div>\n\n      <div>\n        <Button\n          text=\"New Expense\"\n          classes=\"absolute bottom-0 right-0 m-4\"\n          color=\"swampGreen\"\n          onClick={() => {\n            dispatch({\n              type: 'ToggleExpenseFormVisibility',\n              payload: !state.isExpenseFormVisible,\n            });\n          }}\n        />\n\n        {state.isExpenseFormVisible && (\n          <ExpenseForm\n            onSubmit={expense =>\n              dispatch({ type: 'addExpense', payload: expense })\n            }\n            expenseForm={state.addExpenseForm}\n            onChange={expense => {\n              dispatch({ type: 'updateExpenseForm', payload: expense });\n            }}\n            onClick={() => {\n              dispatch({\n                type: 'ToggleExpenseFormVisibility',\n                payload: !state.isExpenseFormVisible,\n              });\n            }}\n          />\n        )}\n      </div>\n    </main>\n  );\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/tailwind.css';\nimport { App } from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}